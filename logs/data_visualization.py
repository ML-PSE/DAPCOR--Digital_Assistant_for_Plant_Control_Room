# Disclaimer: This function was generated by AI. Please review before using.
# Agent Name: data_visualization_agent
# Time Created: 2025-02-02 01:11:42

def data_visualization(data_raw):
    import pandas as pd
    import numpy as np
    import json
    import plotly.graph_objects as go
    import plotly.io as pio





    # Convert timestamp to datetime
    data_raw['timestamp'] = pd.to_datetime(data_raw['timestamp'])

    # Create figure
    fig = go.Figure()

    # Add Furnace Temperature trace
    fig.add_trace(go.Scatter(
        x=data_raw['timestamp'],
        y=data_raw['Furnace temperature'],
        mode='lines+markers',
        name='Furnace Temperature',
        line=dict(color='#3381ff', width=0.65),
        hoverinfo='text',
        hovertext=data_raw['Furnace temperature'].astype(str),
    ))

    # Add Fresh Feed Flow trace
    fig.add_trace(go.Scatter(
        x=data_raw['timestamp'],
        y=data_raw['Fresh feed flow'],
        mode='lines+markers',
        name='Fresh Feed Flow',
        line=dict(color='#ff7f0e', width=0.65),
        hoverinfo='text',
        hovertext=data_raw['Fresh feed flow'].astype(str),
    ))

    # Update layout
    fig.update_layout(
        title='Furnace Temperature and Fresh Feed Flow Over Time',
        xaxis_title='Time',
        yaxis_title='Measurements',
        template='plotly_white',
        font=dict(size=8.8),
        title_font=dict(size=13.2)
    )

    # Update axes ticks font size
    fig.update_xaxes(tickfont=dict(size=8.8))
    fig.update_yaxes(tickfont=dict(size=8.8))

    # Add trendline (smoother)
    fig.add_trace(go.Scatter(
        x=data_raw['timestamp'],
        y=data_raw['Furnace temperature'].rolling(window=30).mean(),
        mode='lines',
        name='Furnace Temperature Trend',
        line=dict(color='#3381ff', width=2, dash='dash'),
        showlegend=False
    ))

    fig.add_trace(go.Scatter(
        x=data_raw['timestamp'],
        y=data_raw['Fresh feed flow'].rolling(window=30).mean(),
        mode='lines',
        name='Fresh Feed Flow Trend',
        line=dict(color='#ff7f0e', width=2, dash='dash'),
        showlegend=False
    ))

    # Convert the figure to JSON
    fig_json = pio.to_json(fig)
    fig_dict = json.loads(fig_json)
    
    return fig_dict